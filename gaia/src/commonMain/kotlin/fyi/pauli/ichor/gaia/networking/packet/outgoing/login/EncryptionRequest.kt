package fyi.pauli.ichor.gaia.networking.packet.outgoing.login

import fyi.pauli.ichor.gaia.networking.packet.State
import fyi.pauli.ichor.gaia.networking.packet.outgoing.OutgoingPacket
import kotlinx.serialization.Serializable

/**
 * Packet, used to authenticate the server.
 *
 * @param serverId Appears to be empty.
 * @param publicKey The server's public key, in bytes.
 * @param verifyToken A sequence of random bytes generated by the server.
 */
@Serializable
public data class EncryptionRequest(
	var serverId: String, var publicKey: ByteArray, var verifyToken: ByteArray
) : OutgoingPacket() {
	override fun equals(other: Any?): Boolean {
		if (this === other) return true
		if (other == null || this::class != other::class) return false

		other as EncryptionRequest

		if (serverId != other.serverId) return false
		if (!publicKey.contentEquals(other.publicKey)) return false
		if (!verifyToken.contentEquals(other.verifyToken)) return false

		return true
	}

	override fun hashCode(): Int {
		var result = serverId.hashCode()
		result = 31 * result + publicKey.contentHashCode()
		result = 31 * result + verifyToken.contentHashCode()
		return result
	}

	override val id: Int
		get() = 0x01

	override val state: State
		get() = State.LOGIN
	override val debugName: String
		get() = "Encryption Request"
}